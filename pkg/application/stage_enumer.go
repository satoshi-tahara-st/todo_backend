// Code generated by "enumer -transform snake -json -yaml -type=Stage -trimprefix Stage"; DO NOT EDIT.

package application

import (
	"encoding/json"
	"fmt"
)

const _StageName = "localstagingproduction"

var _StageIndex = [...]uint8{0, 5, 12, 22}

func (i Stage) String() string {
	if i < 0 || i >= Stage(len(_StageIndex)-1) {
		return fmt.Sprintf("Stage(%d)", i)
	}
	return _StageName[_StageIndex[i]:_StageIndex[i+1]]
}

var _StageValues = []Stage{0, 1, 2}

var _StageNameToValueMap = map[string]Stage{
	_StageName[0:5]:   0,
	_StageName[5:12]:  1,
	_StageName[12:22]: 2,
}

// StageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StageString(s string) (Stage, error) {
	if val, ok := _StageNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Stage values", s)
}

// StageValues returns all values of the enum
func StageValues() []Stage {
	return _StageValues
}

// IsAStage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Stage) IsAStage() bool {
	for _, v := range _StageValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Stage
func (i Stage) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Stage
func (i *Stage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Stage should be a string, got %s", data)
	}

	var err error
	*i, err = StageString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Stage
func (i Stage) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Stage
func (i *Stage) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = StageString(s)
	return err
}
